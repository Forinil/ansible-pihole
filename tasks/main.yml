---

- ansible.builtin.import_tasks: merge-defaults.yml
  tags:
    - default
    - backups-only
    - config-only
    - updates-only

- ansible.builtin.import_tasks: version-check.yml
  tags:
    - backups-only
    - config-only
    - updates-only

- ansible.builtin.import_tasks: assert.yml
  tags:
    - assert
    - backups-only
    - config-only
    - updates-only


- name: Setup Pi-Hole
  when: not (host_restrictions | bool) or group_names is not search("workstation")
  block:

    - name: "Checking if Pi-Hole is already installed"
      ansible.builtin.stat:
        path: "{{ pihole.path.bin }}/pihole"
      register: pihole_binary
      tags: updates-only

    - ansible.builtin.set_fact:
        pihole_installed: "{{ pihole_binary.stat.exists | default(false) }}"
      tags: updates-only

    - ansible.builtin.import_tasks: configure.yml

    - ansible.builtin.import_tasks: install.yml

    - ansible.builtin.import_tasks: update.yml
      when:
        - pihole_installed | bool
        # don't update if user has set a specific version
        - pihole.repo.version == "latest"
      tags: updates-only

    - ansible.builtin.import_tasks: reconfigure.yml
      tags: config-only

    - ansible.builtin.import_tasks: apache-vhost.yml
      when: pihole.apache_enabled | bool
  # END OF BLOCK


# Note that I consciously decided not to use "host_restrictions" here to avoid
# polluting anyone's server with a spurious desktop launcher.
# I expect this task to be skipped for you (unless you happen to have placed your
# Pi-Hole host in a group containing the string "workstation").
- ansible.builtin.import_tasks: desktop-entry.yml
  when: group_names is search("workstation")
  tags: desktop-entry

- ansible.builtin.import_tasks: log-git-state.yml
  tags:
    - log-git-state
    - backups-only
    - config-only
    - updates-only
