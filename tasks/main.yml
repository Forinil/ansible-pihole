---

- ansible.builtin.import_tasks: merge-defaults.yml
  tags:
    - default
    - backups-only
    - config-only
    - updates-only

- name: Define apt packages for {{ ansible_distribution }}
  ansible.builtin.include_vars: "{{ ansible_distribution }}.yml"
  # only expected to support Ubuntu or Raspbian (Debian)
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"
  # could use ansible_lsb.id == "Ubuntu" or "Raspbian" instead, or perhaps
  # ansible_kernel_version is search("Ubuntu") or is search("Raspbian")

- ansible.builtin.import_tasks: version-check.yml
  tags:
    - backups-only
    - config-only
    - updates-only

# Do NOT run assertions for updates-only (or backups-only, although not verified).
# updates-only part of plays that don't even define pihole dict, causing
# assertion to trip and play to fail for no good reason.
- ansible.builtin.import_tasks: assert.yml
  tags:
    - assert
    - config-only


- name: Setup Pi-Hole
  when: not (host_restrictions | bool) or group_names is not search("workstation")
  block:

    - name: "Checking if Pi-Hole is already installed"
      ansible.builtin.stat:
        path: "{{ pihole.path.bin }}/pihole"
      register: pihole_binary
      tags: updates-only

    - ansible.builtin.set_fact:
        pihole_installed: "{{ pihole_binary.stat.exists | default(false) }}"
      tags: updates-only

    - ansible.builtin.import_tasks: configure.yml

    - ansible.builtin.import_tasks: install.yml

    - ansible.builtin.import_tasks: update.yml
      when:
        - pihole_installed | bool
        # don't update if user has set a specific version
        - pihole.repo.version == "latest"
      tags: updates-only

    - ansible.builtin.import_tasks: reconfigure.yml
      tags: config-only
  # END OF BLOCK

# This refuses to work for some reason
# - ansible.builtin.import_tasks: log-git-state.yml
#   tags:
#     - log-git-state
#     - backups-only
#     - config-only
#     - updates-only
